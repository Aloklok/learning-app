"use strict";const{app:d,BrowserWindow:k,ipcMain:a,dialog:L,Tray:W,Menu:P,globalShortcut:T,nativeImage:f,session:Y}=require("electron"),p=require("path"),v=require("fs"),U=require("better-sqlite3"),{exec:_,spawn:Q}=require("node:child_process");let F;try{const e=!d.isPackaged?p.join(__dirname,"../../native-addons/speech-recognizer/build/Release/speech_recognizer.node"):p.join(d.getAppPath(),"../native-addons/speech-recognizer/build/Release/speech_recognizer.node");console.log(`[main.ts] 正在加载原生插件，路径: ${e}`),F=require(e).SpeechRecognizer,console.log("✅ 原生插件加载成功!")}catch(s){console.error("❌ 加载原生插件失败:",s)}let w=null;function D(s){const e=new Date,t=new Date(e);switch(s){case 0:t.setMinutes(e.getMinutes()+5);break;case 1:t.setHours(e.getHours()+24);break;case 2:t.setHours(e.getHours()+72);break;default:t.setMinutes(e.getMinutes()+5);break}return t}process.env.DIST=p.join(__dirname,"../dist");process.env.VITE_PUBLIC=process.env.VITE_DEV_SERVER_URL?p.join(process.env.DIST,"../public"):process.env.DIST;const C=p.join(d.getAppPath(),"database.db");console.log("!!! 应用正在使用的数据库路径是:",C);const r=new U(C);r.pragma("journal_mode = WAL");console.log(`Database connection opened successfully at: ${C}`);function V(){if(r.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name = 'books'").get()){console.log("[main.ts] Database tables already exist. Skipping initialization.");return}try{console.log("[main.ts] Database tables not found. Initializing schema from schema.sql...");const e=d.getAppPath(),t=p.join(e,"database/schema.sql");if(console.log(">>> [main.ts] 正在尝试读取SQL文件，路径是:",t),!v.existsSync(t))throw new Error(`Schema file not found at ${t}`);const o=v.readFileSync(t,"utf8");r.exec(o),console.log("[main.ts] Database schema initialization complete!")}catch(e){console.error("[main.ts] Failed to initialize database schema from file:",e),L.showErrorBox("数据库初始化失败",`无法创建数据库表，请检查 database/schema.sql 文件是否存在。
错误: ${e.message}`),d.quit()}}V();d.on("will-quit",()=>{r&&r.open&&(r.close(),console.log("Database connection closed."))});let n,h,M=!1;const N=process.env.VITE_DEV_SERVER_URL;function B(){if(n=new k({width:1200,height:800,minWidth:800,minHeight:600,titleBarStyle:"hiddenInset",trafficLightPosition:{x:20,y:20},webPreferences:{preload:p.join(__dirname,"preload.js"),nodeIntegration:!1,contextIsolation:!0,webSecurity:!1,allowRunningInsecureContent:!0,experimentalFeatures:!0},show:!1,backgroundColor:"#f4f7fe",vibrancy:"under-window"}),n.once("ready-to-show",()=>{n?.show()}),n.on("close",s=>{M||(s.preventDefault(),n?.hide())}),N)n.loadURL(N),n.webContents.openDevTools();else{const s=process.env.DIST;s?n.loadFile(p.join(s,"index.html")):console.error("DIST environment variable is not set")}}function $(){const s=p.join(__dirname,"../public/icon.png");let e;v.existsSync(s)?e=f.createFromPath(s):e=f.createFromNamedImage("NSApplicationIcon"),(!e||e.isEmpty())&&(e=f.createFromNamedImage("NSApplicationIcon")),h=new W(e.resize({width:16,height:16}));const t=P.buildFromTemplate([{label:"显示应用",click:()=>{n?.show(),n?.focus()}},{label:"开始学习",click:()=>{n?.show(),n?.focus(),n?.webContents.send("navigate-to","/")}},{label:"今日复习",click:()=>{n?.show(),n?.focus(),n?.webContents.send("navigate-to","/review")}},{type:"separator"},{label:"退出应用",click:()=>{M=!0,d.quit()}}]);h.setContextMenu(t),h.setToolTip("日语学习助手"),h.on("double-click",()=>{n?.show(),n?.focus()})}function q(){T.register("CommandOrControl+Shift+L",()=>{n&&(n.isVisible()?n.hide():(n.show(),n.focus()))}),T.register("CommandOrControl+Shift+R",()=>{n?.show(),n?.focus(),n?.webContents.send("navigate-to","/review")})}d.on("window-all-closed",()=>{process.platform!=="darwin"&&d.quit()});d.commandLine.appendSwitch("unsafely-treat-insecure-origin-as-secure","http://localhost:5173");d.commandLine.appendSwitch("disable-web-security");d.commandLine.appendSwitch("allow-running-insecure-content");d.commandLine.appendSwitch("force-fieldtrials","WebRTC-Audio-Red-For-Opus/Enabled/");d.commandLine.appendSwitch("enable-features","VaapiVideoDecoder");d.whenReady().then(async()=>{d.setAsDefaultProtocolClient("learning-app"),B(),$(),q(),n&&(n.webContents.setUserAgent(n.webContents.getUserAgent()+" SpeechRecognition/1.0"),n.webContents.session.webRequest.onHeadersReceived((s,e)=>{e({responseHeaders:{...s.responseHeaders,"Content-Security-Policy":["default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob:; connect-src 'self' https: wss: ws: https://*.googleapis.com https://*.google.com; media-src 'self' blob: data:; img-src 'self' data: blob: https:;"]}})}))});d.on("will-quit",()=>{T.unregisterAll()});async function j(s){return new Promise((e,t)=>{const i=`gemini -m gemini-2.5-flash -p ${JSON.stringify(s)}`;_(i,(l,m,E)=>{if(l){console.error(`exec error: ${l}`),t(new Error(`Failed to execute gemini: ${E||l.message}`));return}E&&console.warn(`gemini stderr: ${E}`),e(m)})})}a.on("start-recognition",(s,e)=>{const t=k.fromWebContents(s.sender);if(!w)try{w=new F({locale:e||"ja-JP",onResult:o=>{},onError:o=>{}}),w.start(),t?.webContents.send("recognition-started")}catch{}});a.handle("db:getAllBooks",async()=>{try{return r.prepare("SELECT id, title, description FROM books").all()}catch(s){throw console.error("Failed to get all books:",s),s}});a.handle("db:getLessonsByBookId",async(s,e)=>{try{return r.prepare(`
      SELECT l.* FROM lessons l
      LEFT JOIN user_progress up ON l.id = up.entity_id AND up.entity_type = 'lesson'
      WHERE l.book_id = ? AND (l.lesson_number = 1 OR up.id IS NOT NULL)
      ORDER BY l.lesson_number ASC
    `).all(e)}catch(t){throw console.error(`[IPC ERROR] Failed to get unlocked lessons for book ID ${e}:`,t),t}});a.handle("db:getLessonById",async(s,e)=>{try{return r.prepare("SELECT * FROM lessons WHERE id = ?").get(e)}catch(t){throw console.error(`Failed to get lesson by ID ${e}:`,t),t}});a.handle("db:getTextsByLessonId",async(s,e)=>{try{return r.prepare("SELECT * FROM texts WHERE lesson_id = ?").all(e)}catch(t){throw console.error(`Failed to get texts for lesson ID ${e}:`,t),t}});a.handle("db:getVocabularyByLessonId",async(s,e)=>{try{return r.prepare(`
      SELECT mv.* FROM master_vocabulary mv 
      JOIN lesson_vocabulary_link lvl ON mv.id = lvl.master_vocabulary_id 
      WHERE lvl.lesson_id = ?
    `).all(e)}catch(t){throw console.error(`Failed to get vocabulary for lesson ID ${e}:`,t),t}});a.handle("db:getGrammarByLessonId",async(s,e)=>{try{return r.prepare("SELECT * FROM grammar WHERE lesson_id = ?").all(e)}catch(t){throw console.error(`Failed to get grammar for lesson ID ${e}:`,t),t}});a.handle("db:getArticlesByLessonId",async(s,e)=>{try{return r.prepare("SELECT * FROM articles WHERE lesson_id = ?").all(e)}catch(t){throw console.error(`Failed to get articles for lesson ID ${e}:`,t),t}});a.handle("db:getLessonAndBookInfo",async(s,e)=>{if(!e)return null;try{const o=r.prepare("SELECT * FROM lessons WHERE id = ?").get(e);if(!o)return null;const l=r.prepare("SELECT id, title, description FROM books WHERE id = ?").get(o.book_id);return{lesson:o,book:l}}catch(t){throw console.error(`[IPC ERROR] Failed to get lesson and book info for lesson ID ${e}:`,t),t}});async function z(s=10){try{const e=new Date().toISOString();return r.prepare("SELECT * FROM master_vocabulary WHERE next_review_at <= ? ORDER BY next_review_at ASC LIMIT ?").all(e,Number(s))}catch(e){throw console.error("Failed to get today's review cards:",e),e}}a.handle("db:getTodaysReviewCards",async(s,e=10)=>{try{const t=new Date().toISOString(),o=`SELECT * FROM master_vocabulary WHERE next_review_at <= ? ORDER BY next_review_at ASC LIMIT ${Number(e)}`;return r.prepare(o).all(t)}catch(t){throw console.error("Failed to get today's review cards:",t),t}});a.handle("db:getDueVocabulary",(s,e=10)=>z(e));async function A(s=10){try{const e=new Date().toISOString();return r.prepare("SELECT * FROM grammar WHERE next_review_at <= ? ORDER BY next_review_at ASC LIMIT ?").all(e,Number(s))}catch(e){throw console.error("Failed to get today's review grammar:",e),e}}a.handle("db:getTodaysReviewGrammar",(s,e=10)=>A(e));a.handle("db:getDueGrammar",(s,e=10)=>A(e));a.handle("db:updateMasteryLevel",async(s,e,t)=>{try{const o=new Date,i=D(t);return r.prepare("UPDATE master_vocabulary SET mastery_level = ?, last_reviewed_at = ?, next_review_at = ? WHERE id = ?").run(t,o.toISOString(),i.toISOString(),e),{success:!0}}catch(o){throw console.error(`Failed to update mastery_level for word ID ${e}:`,o),o}});a.handle("db:updateGrammarMasteryLevel",async(s,e,t)=>{try{const o=new Date,i=D(t);return r.prepare("UPDATE grammar SET mastery_level = ?, last_reviewed_at = ?, next_review_at = ? WHERE id = ?").run(t,o.toISOString(),i.toISOString(),e),{success:!0}}catch(o){throw console.error(`Failed to update mastery_level for grammar ID ${e}:`,o),o}});a.handle("db:getCurrentLearningState",async()=>{try{let e=r.prepare(`
      SELECT l.* FROM lessons l
      JOIN user_progress up ON l.id = up.entity_id
      WHERE up.entity_type = 'lesson' AND up.status = 'unlocked'
      ORDER BY l.lesson_number ASC
      LIMIT 1
    `).get();if(!e){const o=r.prepare(`
        SELECT l.book_id, MAX(l.lesson_number) as last_lesson_number
        FROM lessons l
        JOIN user_progress up ON l.id = up.entity_id
        WHERE up.entity_type = 'lesson' AND up.status = 'completed'
      `).get();o&&o.book_id&&(e=r.prepare("SELECT * FROM lessons WHERE book_id = ? AND lesson_number = ?").get(o.book_id,o.last_lesson_number+1))}if(e||(e=r.prepare("SELECT * FROM lessons ORDER BY book_id ASC, lesson_number ASC LIMIT 1").get()),e||(e=r.prepare("SELECT * FROM lessons ORDER BY book_id ASC, lesson_number ASC LIMIT 1").get()),e){const o=r.prepare("SELECT title FROM books WHERE id = ?").get(e.book_id);return{currentLesson:e,book:o}}return null}catch(s){throw console.error("[IPC ERROR] Failed to get current learning state:",s),s}});a.handle("importer:importBook",async(s,e)=>{try{if(r.prepare("SELECT id FROM books WHERE title = ?").get(e.title)){const l=`教材 "${e.title}" 已经存在。`;return L.showErrorBox("导入失败",l),{success:!1,message:l}}}catch(o){throw console.error("Check for existing book failed:",o),o}const t=r.transaction(()=>{const o=r.prepare("INSERT INTO books (title, description) VALUES (?, ?)"),i=r.prepare("INSERT INTO lessons (book_id, lesson_number, title) VALUES (?, ?, ?)"),l=r.prepare("SELECT id FROM master_vocabulary WHERE word = ?"),m=r.prepare("INSERT INTO master_vocabulary (word, kana, meaning, part_of_speech) VALUES (?, ?, ?, ?)"),E=r.prepare("INSERT INTO lesson_vocabulary_link (lesson_id, master_vocabulary_id) VALUES (?, ?)"),g=r.prepare("INSERT INTO grammar (lesson_id, title, explanation) VALUES (?, ?, ?)"),O=r.prepare("INSERT INTO sentences (vocabulary_id, grammar_id, sentence_jp, sentence_cn) VALUES (?, ?, ?, ?)"),I=r.prepare("INSERT INTO texts (lesson_id, type, content_jp, content_cn) VALUES (?, ?, ?, ?)"),x=r.prepare("INSERT INTO articles (lesson_id, title, content_jp, content_cn, source, tags) VALUES (?, ?, ?, ?, ?, ?)"),H=o.run(e.title,e.description).lastInsertRowid;for(const u of e.lessons){const S=i.run(H,u.lesson_number,u.title).lastInsertRowid;if(u.vocabulary)for(const c of u.vocabulary){let b;const y=l.get(c.word);y?b=y.id:b=m.run(c.word,c.kana,c.meaning,c.part_of_speech).lastInsertRowid,E.run(S,b)}if(u.grammar)for(const c of u.grammar){const y=g.run(S,c.title,c.explanation).lastInsertRowid;if(c.examples)for(const R of c.examples)O.run(null,y,R.jp,R.cn)}if(u.texts)for(const c of u.texts)I.run(S,c.type,c.content_jp,c.content_cn||null);if(u.articles)for(const c of u.articles)x.run(S,c.title,c.content_jp,c.content_cn||null,c.source||null,c.tags?JSON.stringify(c.tags):null)}});try{return t(),{success:!0,message:`教材 "${e.title}" 导入成功！`}}catch(o){throw console.error("Failed to import book:",o),L.showErrorBox("导入错误",`导入教材时发生错误: ${o.message}`),o}});a.handle("db:markLessonAsComplete",async(s,e)=>{try{return r.prepare(`
      INSERT INTO user_progress (entity_id, entity_type, status) 
      VALUES (?, 'lesson', 'completed')
      ON CONFLICT(entity_id, entity_type) DO NOTHING
    `).run(e),console.log(`[IPC] Lesson ${e} marked as complete.`),{success:!0}}catch(t){throw console.error(`[IPC ERROR] Failed to mark lesson ${e} as complete:`,t),t}});a.handle("db:getCompletedLessons",async()=>{try{return r.prepare("SELECT entity_id FROM user_progress WHERE entity_type = 'lesson' AND status = 'completed'").all().map(t=>t.entity_id)}catch(s){throw console.error("[IPC ERROR] Failed to get completed lessons:",s),s}});a.handle("db:unlockNextLesson",async(s,e)=>{try{const o=r.prepare("SELECT book_id, lesson_number FROM lessons WHERE id = ?").get(e);if(!o)throw new Error(`Lesson with ID ${e} not found.`);const l=r.prepare("SELECT id FROM lessons WHERE book_id = ? AND lesson_number = ?").get(o.book_id,o.lesson_number+1);return l?(r.prepare(`
        INSERT INTO user_progress (entity_id, entity_type, status) 
        VALUES (?, 'lesson', 'unlocked')
        ON CONFLICT(entity_id, entity_type) DO UPDATE SET status = 'unlocked' WHERE status != 'completed'
      `).run(l.id),{success:!0,unlockedLessonId:l.id}):{success:!0,unlockedLessonId:null}}catch(t){throw console.error(`[IPC ERROR] Failed to unlock next lesson after ${e}:`,t),t}});a.handle("db:getNeighborLessons",async(s,e)=>{try{return r.prepare(`
      WITH CurrentLesson AS (
        SELECT book_id, lesson_number FROM lessons WHERE id = ?
      )
      SELECT * FROM lessons
      WHERE book_id = (SELECT book_id FROM CurrentLesson)
      AND lesson_number IN (
        (SELECT lesson_number FROM CurrentLesson) - 1,
        (SELECT lesson_number FROM CurrentLesson),
        (SELECT lesson_number FROM CurrentLesson) + 1
      )
      ORDER BY lesson_number ASC
    `).all(e)}catch(t){throw console.error(`[IPC ERROR] Failed to get neighbor lessons for ID ${e}:`,t),t}});a.handle("db:getDashboardStats",async()=>{try{const e=r.prepare(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN mastery_level = 2 THEN 1 ELSE 0 END) as mastered,
        SUM(CASE WHEN mastery_level = 1 THEN 1 ELSE 0 END) as familiar,
        SUM(CASE WHEN mastery_level = 0 THEN 1 ELSE 0 END) as unknown
      FROM master_vocabulary
    `).get(),o=r.prepare(`
      SELECT 
        COUNT(*) as total,
        SUM(CASE WHEN mastery_level = 2 THEN 1 ELSE 0 END) as mastered,
        SUM(CASE WHEN mastery_level = 1 THEN 1 ELSE 0 END) as familiar,
        SUM(CASE WHEN mastery_level = 0 THEN 1 ELSE 0 END) as unknown
      FROM grammar
    `).get(),l=r.prepare("SELECT COUNT(*) as count FROM user_progress WHERE entity_type = 'lesson' AND status = 'completed'").get(),m={N5:{mastered:e.mastered||0,total:e.total||1},N4:{mastered:0,total:1500},N3:{mastered:0,total:2500},N2:{mastered:0,total:4e3},N1:{mastered:0,total:6e3}};return{vocabStats:e,grammarStats:o,completedLessons:l.count,progressByLevel:m}}catch(s){throw console.error("[IPC ERROR] Failed to get dashboard stats:",s),s}});a.handle("ai:ask",async(s,e)=>{try{return await j(e)}catch(t){throw console.error("Failed to ask Gemini:",t),t}});a.handle("speech:startRecognition",async(s,e="ja-JP",t="")=>new Promise(o=>{try{console.log("启动macOS本地语音识别...",{language:e,targetText:t});const i=`
        tell application "QuickTime Player"
          try
            set newRecording to new audio recording
            tell newRecording to start
            delay 3
            tell newRecording to stop
            delay 1
            tell newRecording to close
            return "录音完成"
          on error errorMsg
            return "录音失败: " & errorMsg
          end try
        end tell
      `;_("which say",(l,m,E)=>{if(l){console.log("macOS语音系统不可用"),o({transcript:"macOS语音系统不可用",confidence:.3,isFinal:!0,source:"system_unavailable"});return}console.log("开始录音..."),setTimeout(()=>{_("system_profiler SPAudioDataType",(g,O,I)=>{if(g){o({transcript:"无法访问音频设备，请检查麦克风权限",confidence:.3,isFinal:!0,source:"permission_denied"});return}o({transcript:"演示模式：请在系统设置中启用听写功能后重试",confidence:.6,isFinal:!0,source:"demo_mode",message:`要使用真实语音识别，需要：
1. 系统偏好设置 > 键盘 > 听写
2. 启用听写功能
3. 选择增强听写（离线模式）`})})},2e3)})}catch(i){console.error("Speech recognition error:",i),o({transcript:"语音识别初始化失败",confidence:.3,isFinal:!0,source:"initialization_error"})}}));a.handle("speech:stopRecognition",async()=>({success:!0}));a.handle("speech:speak",async(s,e,t="ja-JP")=>new Promise((o,i)=>{try{_(`say -v ${t==="ja-JP"?"Kyoko":"Alex"} "${e}"`,(m,E,g)=>{if(m){console.error("Text-to-speech error:",m),i({error:"tts_failed",message:m.message});return}o({success:!0})})}catch(l){i({error:"system_error",message:l.message})}}));
